
AVRASM ver. 2.1.30  E:\microprocessor\third-cat\Q8\Codeq8\Debug\List\q8.asm Fri Jan 19 15:37:17 2024

E:\microprocessor\third-cat\Q8\Codeq8\Debug\List\q8.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\microprocessor\third-cat\Q8\Codeq8\Debug\List\q8.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\microprocessor\third-cat\Q8\Codeq8\Debug\List\q8.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 7325
E:\microprocessor\third-cat\Q8\Codeq8\Debug\List\q8.asm(1128): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x25,0x73,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 0002      	.DW  0x02
000037 0270      	.DW  __base_y_G100
000038 006a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000039 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003a 94f8      	CLI
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000041 e08d      	LDI  R24,(14-2)+1
000042 e0a2      	LDI  R26,2
000043 27bb      	CLR  R27
                 __CLEAR_REG:
000044 93ed      	ST   X+,R30
000045 958a      	DEC  R24
000046 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000047 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000048 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000049 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004a 93ed      	ST   X+,R30
00004b 9701      	SBIW R24,1
00004c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004d e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004f 9185      	LPM  R24,Z+
000050 9195      	LPM  R25,Z+
000051 9700      	SBIW R24,0
000052 f061      	BREQ __GLOBAL_INI_END
000053 91a5      	LPM  R26,Z+
000054 91b5      	LPM  R27,Z+
000055 9005      	LPM  R0,Z+
000056 9015      	LPM  R1,Z+
000057 01bf      	MOVW R22,R30
000058 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000059 9005      	LPM  R0,Z+
00005a 920d      	ST   X+,R0
00005b 9701      	SBIW R24,1
00005c f7e1      	BRNE __GLOBAL_INI_LOOP
00005d 01fb      	MOVW R30,R22
00005e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000060 bfed      	OUT  SPL,R30
000061 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000062 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000063 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000064 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000065 940c 0067 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; * q8.c
                 ; *
                 ; * Created: 1/19/2024 2:31:45 PM
                 ; * Author: Parisa
                 ; */
                 ;
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <lcd.h>
                 ;#include <stdio.h>
                 ;
                 ;#asm
                 .equ __lcd_port=0x18
                 ; 0000 0010 #endasm
                 ;
                 ;
                 ;char ch[16];
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0017 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0018 
                 ; 0000 0019 lcd_init(16);
000067 e1a0      	LDI  R26,LOW(16)
000068 940e 0134 	CALL _lcd_init
                 ; 0000 001A lcd_clear();
00006a 940e 00e5 	CALL _lcd_clear
                 ; 0000 001B 
                 ; 0000 001C UCSRA = 0x00;
00006c e0e0      	LDI  R30,LOW(0)
00006d b9eb      	OUT  0xB,R30
                 ; 0000 001D UCSRB = 0x18;
00006e e1e8      	LDI  R30,LOW(24)
00006f b9ea      	OUT  0xA,R30
                 ; 0000 001E UCSRC = 0x86;
000070 e8e6      	LDI  R30,LOW(134)
000071 bde0      	OUT  0x20,R30
                 ; 0000 001F 
                 ; 0000 0020 UBRRH = 0;
000072 e0e0      	LDI  R30,LOW(0)
000073 bde0      	OUT  0x20,R30
                 ; 0000 0021 UBRRL = 51;
000074 e3e3      	LDI  R30,LOW(51)
000075 b9e9      	OUT  0x9,R30
                 ; 0000 0022 
                 ; 0000 0023 
                 ; 0000 0024 
                 ; 0000 0025 while(1){
                 _0x3:
                 ; 0000 0026 
                 ; 0000 0027         scanf("%s", ch);
                +
000076 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000077 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000078 93fa      	ST   -Y,R31
000079 93ea      	ST   -Y,R30
00007a e6e0      	LDI  R30,LOW(_ch)
00007b e0f2      	LDI  R31,HIGH(_ch)
00007c 2766      	CLR  R22
00007d 2777      	CLR  R23
00007e 940e 034b 	CALL __PUTPARD1
000080 e084      	LDI  R24,4
000081 940e 02c3 	CALL _scanf
000083 9626      	ADIW R28,6
                 ; 0000 0028         lcd_clear();
000084 940e 00e5 	CALL _lcd_clear
                 ; 0000 0029         lcd_gotoxy(0,0);
000086 e0e0      	LDI  R30,LOW(0)
000087 93ea      	ST   -Y,R30
000088 e0a0      	LDI  R26,LOW(0)
000089 940e 00d5 	CALL _lcd_gotoxy
                 ; 0000 002A         lcd_puts(ch);
00008b e6a0      	LDI  R26,LOW(_ch)
00008c e0b2      	LDI  R27,HIGH(_ch)
00008d 940e 0112 	CALL _lcd_puts
                 ; 0000 002B         delay_ms(10);
00008f e0aa      	LDI  R26,LOW(10)
000090 e0b0      	LDI  R27,0
000091 940e 032d 	CALL _delay_ms
                 ; 0000 002C 
                 ; 0000 002D     }
000093 cfe2      	RJMP _0x3
                 ; 0000 002E }
                 _0x6:
000094 cfff      	RJMP _0x6
                 ; .FEND
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
000095 e0ff          ldi   r31,15
                 __lcd_delay0:
000096 95fa          dec   r31
000097 f7f1          brne  __lcd_delay0
000098 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000099 b3a7          in    r26,__lcd_direction
00009a 70af          andi  r26,0xf                 ;set as input
00009b bba7          out   __lcd_direction,r26
00009c 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
00009d 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00009e dff6      	RCALL __lcd_delay_G100
00009f 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000a0 dff4      	RCALL __lcd_delay_G100
0000a1 b3a6          in    r26,__lcd_pin
0000a2 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000a3 dff1      	RCALL __lcd_delay_G100
0000a4 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000a5 dfef      	RCALL __lcd_delay_G100
0000a6 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000a7 fda7          sbrc  r26,__lcd_busy_flag
0000a8 cff5          rjmp  __lcd_busy
0000a9 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000aa 7fa0          andi  r26,0xf0
0000ab 2bab          or    r26,r27
0000ac bba8          out   __lcd_port,r26          ;write
0000ad 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000ae 940e 0095 	CALL __lcd_delay_G100
0000b0 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000b1 940e 0095 	CALL __lcd_delay_G100
0000b3 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000b4 93aa      	ST   -Y,R26
0000b5 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0000b6 b3a7          in    r26,__lcd_direction
0000b7 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0000b8 bba7          out   __lcd_direction,r26
0000b9 b3b8          in    r27,__lcd_port
0000ba 70bf          andi  r27,0xf
0000bb 81a8          ld    r26,y
0000bc dfed      	RCALL __lcd_write_nibble_G100
0000bd 81a8          ld    r26,y
0000be 95a2          swap  r26
0000bf dfea      	RCALL __lcd_write_nibble_G100
0000c0 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0000c1 940c 0165 	JMP  _0x2080003
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
0000c3 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000c4 940e 0095 	CALL __lcd_delay_G100
0000c6 b3e6          in    r30,__lcd_pin           ;read
0000c7 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000c8 940e 0095 	CALL __lcd_delay_G100
0000ca 7fe0          andi  r30,0xf0
0000cb 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0000cc 940e 0095 	CALL __lcd_delay_G100
0000ce dff4      	RCALL __lcd_read_nibble_G100
0000cf 2fae          mov   r26,r30
0000d0 dff2      	RCALL __lcd_read_nibble_G100
0000d1 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
0000d2 95e2          swap  r30
0000d3 2bea          or    r30,r26
0000d4 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000d5 93aa      	ST   -Y,R26
0000d6 940e 0099 	CALL __lcd_ready
0000d8 81e8      	LD   R30,Y
0000d9 e0f0      	LDI  R31,0
0000da 59e0      	SUBI R30,LOW(-__base_y_G100)
0000db 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0000dc 81e0      	LD   R30,Z
0000dd 81a9      	LDD  R26,Y+1
0000de 0fae      	ADD  R26,R30
0000df 940e 00b4 	CALL __lcd_write_data
0000e1 8059      	LDD  R5,Y+1
0000e2 8048      	LDD  R4,Y+0
0000e3 9622      	ADIW R28,2
0000e4 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0000e5 940e 0099 	CALL __lcd_ready
0000e7 e0a2      	LDI  R26,LOW(2)
0000e8 940e 00b4 	CALL __lcd_write_data
0000ea 940e 0099 	CALL __lcd_ready
0000ec e0ac      	LDI  R26,LOW(12)
0000ed 940e 00b4 	CALL __lcd_write_data
0000ef 940e 0099 	CALL __lcd_ready
0000f1 e0a1      	LDI  R26,LOW(1)
0000f2 940e 00b4 	CALL __lcd_write_data
0000f4 e0e0      	LDI  R30,LOW(0)
0000f5 2e4e      	MOV  R4,R30
0000f6 2e5e      	MOV  R5,R30
0000f7 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0000f8 93aa      	ST   -Y,R26
0000f9 93ef          push r30
0000fa 93ff          push r31
0000fb 81a8          ld   r26,y
0000fc 9468          set
0000fd 30aa          cpi  r26,10
0000fe f019          breq __lcd_putchar1
0000ff 94e8          clt
000100 1457      	CP   R5,R7
000101 f030      	BRLO _0x2000004
                 	__lcd_putchar1:
000102 9443      	INC  R4
000103 e0e0      	LDI  R30,LOW(0)
000104 93ea      	ST   -Y,R30
000105 2da4      	MOV  R26,R4
000106 dfce      	RCALL _lcd_gotoxy
000107 f036      	brts __lcd_putchar0
                 _0x2000004:
000108 9453      	INC  R5
000109 df8f          rcall __lcd_ready
00010a 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
00010b 81a8      	LD   R26,Y
00010c 940e 00b4 	CALL __lcd_write_data
                 __lcd_putchar0:
00010e 91ff          pop  r31
00010f 91ef          pop  r30
000110 940c 0165 	JMP  _0x2080003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000112 93ba      	ST   -Y,R27
000113 93aa      	ST   -Y,R26
000114 931a      	ST   -Y,R17
                 _0x2000005:
000115 81a9      	LDD  R26,Y+1
000116 81ba      	LDD  R27,Y+1+1
000117 91ed      	LD   R30,X+
000118 83a9      	STD  Y+1,R26
000119 83ba      	STD  Y+1+1,R27
00011a 2f1e      	MOV  R17,R30
00011b 30e0      	CPI  R30,0
00011c f019      	BREQ _0x2000007
00011d 2fa1      	MOV  R26,R17
00011e dfd9      	RCALL _lcd_putchar
00011f cff5      	RJMP _0x2000005
                 _0x2000007:
000120 8118      	LDD  R17,Y+0
000121 9623      	ADIW R28,3
000122 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
000123 27aa          clr   r26
000124 27bb          clr   r27
                 __long_delay0:
000125 9711          sbiw  r26,1         ;2 cycles
000126 f7f1          brne  __long_delay0 ;2 cycles
000127 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000128 93aa      	ST   -Y,R26
000129 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00012a b3a7          in    r26,__lcd_direction
00012b 6fa7          ori   r26,0xf7                ;set as output
00012c bba7          out   __lcd_direction,r26
00012d b3b8          in    r27,__lcd_port
00012e 70bf          andi  r27,0xf
00012f 81a8          ld    r26,y
000130 940e 00aa 	CALL __lcd_write_nibble_G100
000132 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000133 c031      	RJMP _0x2080003
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000134 93aa      	ST   -Y,R26
000135 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000136 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000137 8078      	LDD  R7,Y+0
000138 81e8      	LD   R30,Y
000139 58e0      	SUBI R30,-LOW(128)
                +
00013a 93e0 0272+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00013c 81e8      	LD   R30,Y
00013d 54e0      	SUBI R30,-LOW(192)
                +
00013e 93e0 0273+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000140 940e 0309 	CALL SUBOPT_0x0
000142 940e 0309 	CALL SUBOPT_0x0
000144 940e 0309 	CALL SUBOPT_0x0
000146 dfdc      	RCALL __long_delay_G100
000147 e2a0      	LDI  R26,LOW(32)
000148 dfdf      	RCALL __lcd_init_write_G100
000149 dfd9      	RCALL __long_delay_G100
00014a e2a8      	LDI  R26,LOW(40)
00014b 940e 030e 	CALL SUBOPT_0x1
00014d e0a4      	LDI  R26,LOW(4)
00014e 940e 030e 	CALL SUBOPT_0x1
000150 e8a5      	LDI  R26,LOW(133)
000151 940e 030e 	CALL SUBOPT_0x1
000153 b3a7          in    r26,__lcd_direction
000154 70af          andi  r26,0xf                 ;set as input
000155 bba7          out   __lcd_direction,r26
000156 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000157 940e 00cc 	CALL _lcd_read_byte0_G100
000159 30e5      	CPI  R30,LOW(0x5)
00015a f011      	BREQ _0x200000B
00015b e0e0      	LDI  R30,LOW(0)
00015c c008      	RJMP _0x2080003
                 _0x200000B:
00015d 940e 0099 	CALL __lcd_ready
00015f e0a6      	LDI  R26,LOW(6)
000160 940e 00b4 	CALL __lcd_write_data
000162 940e 00e5 	CALL _lcd_clear
000164 e0e1      	LDI  R30,LOW(1)
                 _0x2080003:
000165 9621      	ADIW R28,1
000166 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 getchar0:
000167 9b5f           sbis usr,rxc
000168 cffe           rjmp getchar0
000169 b1ec           in   r30,udr
00016a 9508      	RET
                 ; .FEND
                 _get_usart_G101:
                 ; .FSTART _get_usart_G101
00016b 93ba      	ST   -Y,R27
00016c 93aa      	ST   -Y,R26
00016d 931a      	ST   -Y,R17
00016e 81a9      	LDD  R26,Y+1
00016f 81ba      	LDD  R27,Y+1+1
000170 e0e0      	LDI  R30,LOW(0)
000171 93ec      	ST   X,R30
000172 81ab      	LDD  R26,Y+3
000173 81bc      	LDD  R27,Y+3+1
000174 91ec      	LD   R30,X
000175 2f1e      	MOV  R17,R30
000176 30e0      	CPI  R30,0
000177 f019      	BREQ _0x2020078
000178 e0e0      	LDI  R30,LOW(0)
000179 93ec      	ST   X,R30
00017a c002      	RJMP _0x2020079
                 _0x2020078:
00017b dfeb      	RCALL _getchar
00017c 2f1e      	MOV  R17,R30
                 _0x2020079:
00017d 2fe1      	MOV  R30,R17
00017e 8118      	LDD  R17,Y+0
00017f 9625      	ADIW R28,5
000180 9508      	RET
                 ; .FEND
                 __scanf_G101:
                 ; .FSTART __scanf_G101
000181 92ff      	PUSH R15
000182 93ba      	ST   -Y,R27
000183 93aa      	ST   -Y,R26
000184 9724      	SBIW R28,4
000185 940e 0350 	CALL __SAVELOCR6
000187 e0e0      	LDI  R30,LOW(0)
000188 e0f0      	LDI  R31,HIGH(0)
000189 87e8      	STD  Y+8,R30
00018a 87f9      	STD  Y+8+1,R31
00018b 2f4e      	MOV  R20,R30
                 _0x202007F:
00018c 89e8      	LDD  R30,Y+16
00018d 89f9      	LDD  R31,Y+16+1
00018e 9631      	ADIW R30,1
00018f 8be8      	STD  Y+16,R30
000190 8bf9      	STD  Y+16+1,R31
000191 9731      	SBIW R30,1
000192 91e4      	LPM  R30,Z
000193 2f3e      	MOV  R19,R30
000194 30e0      	CPI  R30,0
000195 f409      	BRNE PC+2
000196 c125      	RJMP _0x2020081
000197 940e 0312 	CALL SUBOPT_0x2
000199 f0c1      	BREQ _0x2020082
                 _0x2020083:
00019a b7ed      	IN   R30,SPL
00019b b7fe      	IN   R31,SPH
00019c 93fa      	ST   -Y,R31
00019d 93ea      	ST   -Y,R30
00019e 934f      	PUSH R20
00019f 940e 0317 	CALL SUBOPT_0x3
0001a1 914f      	POP  R20
0001a2 2f3e      	MOV  R19,R30
0001a3 30e0      	CPI  R30,0
0001a4 f019      	BREQ _0x2020086
0001a5 940e 0312 	CALL SUBOPT_0x2
0001a7 f409      	BRNE _0x2020087
                 _0x2020086:
0001a8 c007      	RJMP _0x2020085
                 _0x2020087:
0001a9 940e 031d 	CALL SUBOPT_0x4
0001ab f41c      	BRGE _0x2020088
0001ac efef      	LDI  R30,LOW(65535)
0001ad efff      	LDI  R31,HIGH(65535)
0001ae c10f      	RJMP _0x2080001
                 _0x2020088:
0001af cfea      	RJMP _0x2020083
                 _0x2020085:
0001b0 2f43      	MOV  R20,R19
0001b1 c109      	RJMP _0x2020089
                 _0x2020082:
0001b2 3235      	CPI  R19,37
0001b3 f009      	BREQ PC+2
0001b4 c0ee      	RJMP _0x202008A
0001b5 e050      	LDI  R21,LOW(0)
                 _0x202008B:
0001b6 89e8      	LDD  R30,Y+16
0001b7 89f9      	LDD  R31,Y+16+1
0001b8 9135      	LPM  R19,Z+
0001b9 8be8      	STD  Y+16,R30
0001ba 8bf9      	STD  Y+16+1,R31
0001bb 3330      	CPI  R19,48
0001bc f010      	BRLO _0x202008F
0001bd 333a      	CPI  R19,58
0001be f008      	BRLO _0x202008E
                 _0x202008F:
0001bf c007      	RJMP _0x202008D
                 _0x202008E:
0001c0 e0aa      	LDI  R26,LOW(10)
0001c1 9f5a      	MUL  R21,R26
0001c2 2d50      	MOV  R21,R0
0001c3 2fe3      	MOV  R30,R19
0001c4 53e0      	SUBI R30,LOW(48)
0001c5 0f5e      	ADD  R21,R30
0001c6 cfef      	RJMP _0x202008B
                 _0x202008D:
0001c7 3030      	CPI  R19,0
0001c8 f409      	BRNE _0x2020091
0001c9 c0f2      	RJMP _0x2020081
                 _0x2020091:
                 _0x2020092:
0001ca b7ed      	IN   R30,SPL
0001cb b7fe      	IN   R31,SPH
0001cc 93fa      	ST   -Y,R31
0001cd 93ea      	ST   -Y,R30
0001ce 934f      	PUSH R20
0001cf 940e 0317 	CALL SUBOPT_0x3
0001d1 914f      	POP  R20
0001d2 2f2e      	MOV  R18,R30
0001d3 2fae      	MOV  R26,R30
0001d4 940e 02ef 	CALL _isspace
0001d6 30e0      	CPI  R30,0
0001d7 f039      	BREQ _0x2020094
0001d8 940e 031d 	CALL SUBOPT_0x4
0001da f41c      	BRGE _0x2020095
0001db efef      	LDI  R30,LOW(65535)
0001dc efff      	LDI  R31,HIGH(65535)
0001dd c0e0      	RJMP _0x2080001
                 _0x2020095:
0001de cfeb      	RJMP _0x2020092
                 _0x2020094:
0001df 3020      	CPI  R18,0
0001e0 f409      	BRNE _0x2020096
0001e1 c0d1      	RJMP _0x2020097
                 _0x2020096:
0001e2 2f42      	MOV  R20,R18
0001e3 3050      	CPI  R21,0
0001e4 f409      	BRNE _0x2020098
0001e5 ef5f      	LDI  R21,LOW(255)
                 _0x2020098:
0001e6 2fe3      	MOV  R30,R19
0001e7 36e3      	CPI  R30,LOW(0x63)
0001e8 f499      	BRNE _0x202009C
0001e9 940e 0322 	CALL SUBOPT_0x5
0001eb b7ed      	IN   R30,SPL
0001ec b7fe      	IN   R31,SPH
0001ed 93fa      	ST   -Y,R31
0001ee 93ea      	ST   -Y,R30
0001ef 934f      	PUSH R20
0001f0 940e 0317 	CALL SUBOPT_0x3
0001f2 914f      	POP  R20
0001f3 01d8      	MOVW R26,R16
0001f4 93ec      	ST   X,R30
0001f5 940e 031d 	CALL SUBOPT_0x4
0001f7 f41c      	BRGE _0x202009D
0001f8 efef      	LDI  R30,LOW(65535)
0001f9 efff      	LDI  R31,HIGH(65535)
0001fa c0c3      	RJMP _0x2080001
                 _0x202009D:
0001fb c0a1      	RJMP _0x202009B
                 _0x202009C:
0001fc 37e3      	CPI  R30,LOW(0x73)
0001fd f541      	BRNE _0x20200A6
0001fe 940e 0322 	CALL SUBOPT_0x5
                 _0x202009F:
000200 2fe5      	MOV  R30,R21
000201 5051      	SUBI R21,1
000202 30e0      	CPI  R30,0
000203 f0f1      	BREQ _0x20200A1
000204 b7ed      	IN   R30,SPL
000205 b7fe      	IN   R31,SPH
000206 93fa      	ST   -Y,R31
000207 93ea      	ST   -Y,R30
000208 934f      	PUSH R20
000209 940e 0317 	CALL SUBOPT_0x3
00020b 914f      	POP  R20
00020c 2f3e      	MOV  R19,R30
00020d 30e0      	CPI  R30,0
00020e f019      	BREQ _0x20200A3
00020f 940e 0312 	CALL SUBOPT_0x2
000211 f039      	BREQ _0x20200A2
                 _0x20200A3:
000212 940e 031d 	CALL SUBOPT_0x4
000214 f41c      	BRGE _0x20200A5
000215 efef      	LDI  R30,LOW(65535)
000216 efff      	LDI  R31,HIGH(65535)
000217 c0a6      	RJMP _0x2080001
                 _0x20200A5:
000218 c009      	RJMP _0x20200A1
                 _0x20200A2:
000219 931f      	PUSH R17
00021a 930f      	PUSH R16
                +
00021b 5f0f     +SUBI R16 , LOW ( - 1 )
00021c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00021d 2fe3      	MOV  R30,R19
00021e 91af      	POP  R26
00021f 91bf      	POP  R27
000220 93ec      	ST   X,R30
000221 cfde      	RJMP _0x202009F
                 _0x20200A1:
000222 01d8      	MOVW R26,R16
000223 e0e0      	LDI  R30,LOW(0)
000224 93ec      	ST   X,R30
000225 c077      	RJMP _0x202009B
                 _0x20200A6:
000226 9468      	SET
000227 f8f1      	BLD  R15,1
000228 94e8      	CLT
000229 f8f2      	BLD  R15,2
00022a 2fe3      	MOV  R30,R19
00022b 36e4      	CPI  R30,LOW(0x64)
00022c f011      	BREQ _0x20200AB
00022d 36e9      	CPI  R30,LOW(0x69)
00022e f419      	BRNE _0x20200AC
                 _0x20200AB:
00022f 94e8      	CLT
000230 f8f1      	BLD  R15,1
000231 c002      	RJMP _0x20200AD
                 _0x20200AC:
000232 37e5      	CPI  R30,LOW(0x75)
000233 f411      	BRNE _0x20200AE
                 _0x20200AD:
000234 e02a      	LDI  R18,LOW(10)
000235 c008      	RJMP _0x20200A9
                 _0x20200AE:
000236 37e8      	CPI  R30,LOW(0x78)
000237 f411      	BRNE _0x20200AF
000238 e120      	LDI  R18,LOW(16)
000239 c004      	RJMP _0x20200A9
                 _0x20200AF:
00023a 32e5      	CPI  R30,LOW(0x25)
00023b f409      	BRNE _0x20200B2
00023c c066      	RJMP _0x20200B1
                 _0x20200B2:
00023d c07e      	RJMP _0x2080002
                 _0x20200A9:
00023e e0e0      	LDI  R30,LOW(0)
00023f 83ee      	STD  Y+6,R30
000240 83ef      	STD  Y+6+1,R30
000241 9468      	SET
000242 f8f0      	BLD  R15,0
                 _0x20200B3:
000243 2fe5      	MOV  R30,R21
000244 5051      	SUBI R21,1
000245 30e0      	CPI  R30,0
000246 f409      	BRNE PC+2
000247 c046      	RJMP _0x20200B5
000248 b7ed      	IN   R30,SPL
000249 b7fe      	IN   R31,SPH
00024a 93fa      	ST   -Y,R31
00024b 93ea      	ST   -Y,R30
00024c 934f      	PUSH R20
00024d 940e 0317 	CALL SUBOPT_0x3
00024f 914f      	POP  R20
000250 2f3e      	MOV  R19,R30
000251 32e1      	CPI  R30,LOW(0x21)
000252 f438      	BRSH _0x20200B6
000253 940e 031d 	CALL SUBOPT_0x4
000255 f41c      	BRGE _0x20200B7
000256 efef      	LDI  R30,LOW(65535)
000257 efff      	LDI  R31,HIGH(65535)
000258 c065      	RJMP _0x2080001
                 _0x20200B7:
000259 c017      	RJMP _0x20200B8
                 _0x20200B6:
00025a fcf1      	SBRC R15,1
00025b c008      	RJMP _0x20200B9
00025c 9468      	SET
00025d f8f1      	BLD  R15,1
00025e 323d      	CPI  R19,45
00025f f411      	BRNE _0x20200BA
000260 f8f2      	BLD  R15,2
000261 cfe1      	RJMP _0x20200B3
                 _0x20200BA:
000262 323b      	CPI  R19,43
000263 f2f9      	BREQ _0x20200B3
                 _0x20200B9:
000264 3120      	CPI  R18,16
000265 f431      	BRNE _0x20200BC
000266 2fa3      	MOV  R26,R19
000267 940e 02fa 	CALL _isxdigit
000269 30e0      	CPI  R30,0
00026a f031      	BREQ _0x20200B8
00026b c009      	RJMP _0x20200BE
                 _0x20200BC:
00026c 2fa3      	MOV  R26,R19
00026d 940e 02e6 	CALL _isdigit
00026f 30e0      	CPI  R30,0
000270 f421      	BRNE _0x20200BF
                 _0x20200B8:
000271 fcf0      	SBRC R15,0
000272 c049      	RJMP _0x20200C1
000273 2f43      	MOV  R20,R19
000274 c019      	RJMP _0x20200B5
                 _0x20200BF:
                 _0x20200BE:
000275 3631      	CPI  R19,97
000276 f010      	BRLO _0x20200C2
000277 5537      	SUBI R19,LOW(87)
000278 c005      	RJMP _0x20200C3
                 _0x20200C2:
000279 3431      	CPI  R19,65
00027a f010      	BRLO _0x20200C4
00027b 5337      	SUBI R19,LOW(55)
00027c c001      	RJMP _0x20200C5
                 _0x20200C4:
00027d 5330      	SUBI R19,LOW(48)
                 _0x20200C5:
                 _0x20200C3:
00027e 2fe2      	MOV  R30,R18
00027f 81ae      	LDD  R26,Y+6
000280 81bf      	LDD  R27,Y+6+1
000281 e0f0      	LDI  R31,0
000282 940e 033f 	CALL __MULW12U
000284 01df      	MOVW R26,R30
000285 2fe3      	MOV  R30,R19
000286 e0f0      	LDI  R31,0
000287 0fea      	ADD  R30,R26
000288 1ffb      	ADC  R31,R27
000289 83ee      	STD  Y+6,R30
00028a 83ff      	STD  Y+6+1,R31
00028b 94e8      	CLT
00028c f8f0      	BLD  R15,0
00028d cfb5      	RJMP _0x20200B3
                 _0x20200B5:
00028e 940e 0322 	CALL SUBOPT_0x5
000290 fef2      	SBRS R15,2
000291 c006      	RJMP _0x20200C6
000292 81ee      	LDD  R30,Y+6
000293 81ff      	LDD  R31,Y+6+1
000294 940e 033b 	CALL __ANEGW1
000296 83ee      	STD  Y+6,R30
000297 83ff      	STD  Y+6+1,R31
                 _0x20200C6:
000298 81ee      	LDD  R30,Y+6
000299 81ff      	LDD  R31,Y+6+1
00029a 01d8      	MOVW R26,R16
00029b 93ed      	ST   X+,R30
00029c 93fc      	ST   X,R31
                 _0x202009B:
00029d 85e8      	LDD  R30,Y+8
00029e 85f9      	LDD  R31,Y+8+1
00029f 9631      	ADIW R30,1
0002a0 87e8      	STD  Y+8,R30
0002a1 87f9      	STD  Y+8+1,R31
0002a2 c018      	RJMP _0x20200C7
                 _0x202008A:
                 _0x20200B1:
0002a3 b7ed      	IN   R30,SPL
0002a4 b7fe      	IN   R31,SPH
0002a5 93fa      	ST   -Y,R31
0002a6 93ea      	ST   -Y,R30
0002a7 934f      	PUSH R20
0002a8 940e 0317 	CALL SUBOPT_0x3
0002aa 914f      	POP  R20
0002ab 17e3      	CP   R30,R19
0002ac f071      	BREQ _0x20200C8
0002ad 940e 031d 	CALL SUBOPT_0x4
0002af f41c      	BRGE _0x20200C9
0002b0 efef      	LDI  R30,LOW(65535)
0002b1 efff      	LDI  R31,HIGH(65535)
0002b2 c00b      	RJMP _0x2080001
                 _0x20200C9:
                 _0x2020097:
0002b3 85e8      	LDD  R30,Y+8
0002b4 85f9      	LDD  R31,Y+8+1
0002b5 9730      	SBIW R30,0
0002b6 f419      	BRNE _0x20200CA
0002b7 efef      	LDI  R30,LOW(65535)
0002b8 efff      	LDI  R31,HIGH(65535)
0002b9 c004      	RJMP _0x2080001
                 _0x20200CA:
0002ba c001      	RJMP _0x2020081
                 _0x20200C8:
                 _0x20200C7:
                 _0x2020089:
0002bb ced0      	RJMP _0x202007F
                 _0x2020081:
                 _0x20200C1:
                 _0x2080002:
0002bc 85e8      	LDD  R30,Y+8
0002bd 85f9      	LDD  R31,Y+8+1
                 _0x2080001:
0002be 940e 0357 	CALL __LOADLOCR6
0002c0 9662      	ADIW R28,18
0002c1 90ff      	POP  R15
0002c2 9508      	RET
                 ; .FEND
                 _scanf:
                 ; .FSTART _scanf
0002c3 92ff      	PUSH R15
0002c4 2ef8      	MOV  R15,R24
0002c5 9723      	SBIW R28,3
0002c6 931a      	ST   -Y,R17
0002c7 930a      	ST   -Y,R16
0002c8 01de      	MOVW R26,R28
0002c9 9611      	ADIW R26,1
0002ca 940e 0337 	CALL __ADDW2R15
0002cc 018d      	MOVW R16,R26
0002cd e0e0      	LDI  R30,LOW(0)
0002ce 83eb      	STD  Y+3,R30
0002cf 83ec      	STD  Y+3+1,R30
0002d0 01de      	MOVW R26,R28
0002d1 9615      	ADIW R26,5
0002d2 940e 0337 	CALL __ADDW2R15
0002d4 940e 0347 	CALL __GETW1P
0002d6 93fa      	ST   -Y,R31
0002d7 93ea      	ST   -Y,R30
0002d8 931a      	ST   -Y,R17
0002d9 930a      	ST   -Y,R16
0002da e6eb      	LDI  R30,LOW(_get_usart_G101)
0002db e0f1      	LDI  R31,HIGH(_get_usart_G101)
0002dc 93fa      	ST   -Y,R31
0002dd 93ea      	ST   -Y,R30
0002de 01de      	MOVW R26,R28
0002df 9618      	ADIW R26,8
0002e0 dea0      	RCALL __scanf_G101
0002e1 8119      	LDD  R17,Y+1
0002e2 8108      	LDD  R16,Y+0
0002e3 9625      	ADIW R28,5
0002e4 90ff      	POP  R15
0002e5 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _isdigit:
                 ; .FSTART _isdigit
0002e6 93aa      	ST   -Y,R26
0002e7 e0e1          ldi  r30,1
0002e8 91f9          ld   r31,y+
0002e9 33f0          cpi  r31,'0'
0002ea f010          brlo isdigit0
0002eb 33fa          cpi  r31,'9'+1
0002ec f008          brlo isdigit1
                 isdigit0:
0002ed 27ee          clr  r30
                 isdigit1:
0002ee 9508          ret
                 ; .FEND
                 _isspace:
                 ; .FSTART _isspace
0002ef 93aa      	ST   -Y,R26
0002f0 e0e1          ldi  r30,1
0002f1 91f9          ld   r31,y+
0002f2 32f0          cpi  r31,' '
0002f3 f029          breq isspace1
0002f4 30f9          cpi  r31,9
0002f5 f010          brlo isspace0
0002f6 30fe          cpi  r31,13+1
0002f7 f008          brlo isspace1
                 isspace0:
0002f8 27ee          clr  r30
                 isspace1:
0002f9 9508          ret
                 ; .FEND
                 _isxdigit:
                 ; .FSTART _isxdigit
0002fa 93aa      	ST   -Y,R26
0002fb e0e1          ldi  r30,1
0002fc 91f9          ld   r31,y+
0002fd 53f0          subi r31,0x30
0002fe f040          brcs isxdigit0
0002ff 30fa          cpi  r31,10
000300 f038          brcs isxdigit1
000301 75ff          andi r31,0x5f
000302 50f7          subi r31,7
000303 30fa          cpi  r31,10
000304 f010          brcs isxdigit0
000305 31f0          cpi  r31,16
000306 f008          brcs isxdigit1
                 isxdigit0:
000307 27ee          clr  r30
                 isxdigit1:
000308 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _ch:
000260           	.BYTE 0x10
                 __base_y_G100:
000270           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000309 940e 0123 	CALL __long_delay_G100
00030b e3a0      	LDI  R26,LOW(48)
00030c 940c 0128 	JMP  __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00030e 940e 00b4 	CALL __lcd_write_data
000310 940c 0123 	JMP  __long_delay_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000312 2fa3      	MOV  R26,R19
000313 940e 02ef 	CALL _isspace
000315 30e0      	CPI  R30,0
000316 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3:
000317 85ac      	LDD  R26,Y+12
000318 85bd      	LDD  R27,Y+12+1
000319 85ee      	LDD  R30,Y+14
00031a 85ff      	LDD  R31,Y+14+1
00031b 9509      	ICALL
00031c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
00031d 85aa      	LDD  R26,Y+10
00031e 85bb      	LDD  R27,Y+10+1
00031f 91ac      	LD   R26,X
000320 30a0      	CPI  R26,0
000321 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
000322 85ee      	LDD  R30,Y+14
000323 85ff      	LDD  R31,Y+14+1
000324 9734      	SBIW R30,4
000325 87ee      	STD  Y+14,R30
000326 87ff      	STD  Y+14+1,R31
000327 85ae      	LDD  R26,Y+14
000328 85bf      	LDD  R27,Y+14+1
000329 9614      	ADIW R26,4
00032a 910d      	LD   R16,X+
00032b 911c      	LD   R17,X
00032c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00032d 9610      	adiw r26,0
00032e f039      	breq __delay_ms1
                 __delay_ms0:
00032f 95a8      	wdr
                +
000330 ed80     +LDI R24 , LOW ( 0x7D0 )
000331 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000332 9701     +SBIW R24 , 1
000333 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000334 9711      	sbiw r26,1
000335 f7c9      	brne __delay_ms0
                 __delay_ms1:
000336 9508      	ret
                 
                 __ADDW2R15:
000337 2400      	CLR  R0
000338 0daf      	ADD  R26,R15
000339 1db0      	ADC  R27,R0
00033a 9508      	RET
                 
                 __ANEGW1:
00033b 95f1      	NEG  R31
00033c 95e1      	NEG  R30
00033d 40f0      	SBCI R31,0
00033e 9508      	RET
                 
                 __MULW12U:
00033f 9ffa      	MUL  R31,R26
000340 2df0      	MOV  R31,R0
000341 9feb      	MUL  R30,R27
000342 0df0      	ADD  R31,R0
000343 9fea      	MUL  R30,R26
000344 2de0      	MOV  R30,R0
000345 0df1      	ADD  R31,R1
000346 9508      	RET
                 
                 __GETW1P:
000347 91ed      	LD   R30,X+
000348 91fc      	LD   R31,X
000349 9711      	SBIW R26,1
00034a 9508      	RET
                 
                 __PUTPARD1:
00034b 937a      	ST   -Y,R23
00034c 936a      	ST   -Y,R22
00034d 93fa      	ST   -Y,R31
00034e 93ea      	ST   -Y,R30
00034f 9508      	RET
                 
                 __SAVELOCR6:
000350 935a      	ST   -Y,R21
                 __SAVELOCR5:
000351 934a      	ST   -Y,R20
                 __SAVELOCR4:
000352 933a      	ST   -Y,R19
                 __SAVELOCR3:
000353 932a      	ST   -Y,R18
                 __SAVELOCR2:
000354 931a      	ST   -Y,R17
000355 930a      	ST   -Y,R16
000356 9508      	RET
                 
                 __LOADLOCR6:
000357 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000358 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000359 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00035a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00035b 8119      	LDD  R17,Y+1
00035c 8108      	LD   R16,Y
00035d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  10 r1 :   2 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:  16 
r16:  12 r17:  17 r18:   9 r19:  29 r20:  18 r21:  12 r22:   4 r23:   2 
r24:  11 r25:   3 r26:  95 r27:  25 r28:  13 r29:   1 r30: 172 r31:  77 
x  :  17 y  : 127 z  :  10 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   6 
adiw  :  14 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   7 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   4 break :   0 breq  :  18 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   0 brne  :  23 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  64 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   0 cpi   :  41 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 ijmp  :   0 
in    :  21 inc   :   2 jmp   :  26 ld    :  20 ldd   :  45 ldi   :  79 
lds   :   0 lpm   :  10 lsl   :   0 lsr   :   0 mov   :  34 movw  :  11 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   2 out   :  16 pop   :  12 push  :  12 rcall :  16 ret   :  29 
reti  :   0 rjmp  :  49 rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :   9 sbic  :   0 sbis  :   1 sbiw  :  12 sbr   :   0 sbrc  :   3 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  60 std   :  20 sts   :   2 sub   :   0 subi  :  12 swap  :   2 
tst   :   0 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006bc   1692     32   1724   32768   5.3%
[.dseg] 0x000060 0x000274      0     20     20    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
